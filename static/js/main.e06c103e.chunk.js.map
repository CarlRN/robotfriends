{"version":3,"sources":["serviceWorker.js","components/Header.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Header","nextProps","nextState","id","className","Component","SearchBox","onSearchFieldChange","aria-label","type","placeholder","onChange","Card","name","email","alt","src","CardList","robots","map","user","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","hasError","info","this","setState","React","App","getCardListView","robotsFiltered","isPending","onRequestRobots","searchField","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e06c103e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n//import CounterButton from './CounterButton';\r\n\r\nclass Header extends Component{\r\n\r\n    //react cicle hook\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false; //to avoid unnecesary render...\r\n    }\r\n\r\n\r\n    render(){\r\n        console.log('Header')\r\n        return (\r\n            <div>\r\n                <h1 id='title' className='f1'>RoboFriends</h1>\r\n            { /*   <CounterButton color = {'red'} /> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst SearchBox = ({onSearchFieldChange}) => {\r\n    return(\r\n        <div className='pa2'>          \r\n            <input \r\n                aria-label = 'Search Robots'\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search Robots'\r\n                onChange={onSearchFieldChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n\r\nreturn (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt='robot' src={`https://robohash.org/${id}?size=200x200`} />\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\n\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          robots.map((user) => {\r\n            return (\r\n                <Card \r\n                    key={user.id}\r\n                    id={user.id} \r\n                    name={user.name} \r\n                    email={user.email}\r\n                />\r\n            )\r\n          })\r\n        }\r\n      </div>      \r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={ {overflowY:'scroll',border:'3px solid black',height:'800px'} }>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n       this.setState( {hasError: true} );\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        if (this.state.hasError){\r\n            return <h1>Oh noo! There's an error.</h1>\r\n        }\r\n        \r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Header from '../components/Header';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n//import {robots} from './robots';\r\n\r\n//redux implementation...\r\nimport { connect } from 'react-redux'; //instead using redux subscript, connect is an optimized way\r\nimport { setSearchField, requestRobots } from '../actions.js';\r\n\r\n //set the props that App will use that comes from the store(through the reducer). AS PROPS\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\n//set the action that will be dispatch for this component. AS PROPS\r\n//obs.: dispatch comes from redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchFieldChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()) //thunk middleware tricky here. It need a function return to do his work\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n  componentDidMount(){\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const {searchField, onSearchFieldChange,robots, isPending} = this.props //this props are defined in mapStateToProps and mapDispatchToProps\r\n    const robotsFiltered = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    });\r\n\r\n    //implementation 1: original\r\n   \r\n      return isPending ? <h1 className='tc'>Loading...</h1> :   \r\n       ( \r\n        <div className=\"tc\">\r\n          <Header />       \r\n          <SearchBox onSearchFieldChange={onSearchFieldChange}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={robotsFiltered} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      ); \r\n     \r\n\r\n    //implementation 2: alternative...\r\n  //  return this.getCardListView(robotsFiltered);\r\n\r\n  }\r\n\r\n  //example of how to use if condition 'inside JSX'\r\n  getCardListView = (robotsFiltered) => {\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 id='title' className='f1'>RoboFriends</h1>        \r\n\r\n        { /* IIFE  */ }  \r\n        {(() => {\r\n          if(this.props.isPending){\r\n            return <h1>Loading...</h1>      \r\n          }else{\r\n            return (\r\n              <div>\r\n                <SearchBox onSearchFieldChange={this.props.onSearchFieldChange}/>\r\n                <Scroll>\r\n                  <ErrorBoundry>\r\n                    <CardList robots={robotsFiltered} />\r\n                  </ErrorBoundry>\r\n                </Scroll>  \r\n              </div>)          \r\n          }\r\n        })()}     \r\n      </div> \r\n    )\r\n  } \r\n  \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App); //obs.: connect is a high order function (a function that return another function)\r\n                                                                  //connect tells to this component (App) to subscript to the redux store, specifically\r\n                                                                  //in what states are interested in\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n//return an object\r\nexport const setSearchField = (text) => ({\r\n    type : CHANGE_SEARCH_FIELD,\r\n    payload : text\r\n})\r\n\r\n//obs.: dispatch comes from redux\r\n//Because this action will be a promise (async request) using fetch, it has three actions related...\r\n//this reducer-function return another function (high order function) that it's needed for the thunk middleware \r\n//Use this way when the thunk middleware (or similar) is present because redux for own it cannot understand it\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch( {type: REQUEST_ROBOTS_PENDING} );\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data => dispatch( {type: REQUEST_ROBOTS_SUCCESS, payload: data} ))\r\n    .catch(error => dispatch( {type: REQUEST_ROBOTS_FAILED, payload: error} ))\r\n} ","//related to search field change\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n//related to request robots. Because this action will be a promise (async request) using fetch, it have three actions related...\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state, {searchField: action.payload} )\r\n            //return {...state, searchField: action.payload}\r\n        default:\r\n            return state    \r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\n\r\nexport const requestRobots = (state=initialStateRobots,action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state,  isPending: true  }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, isPending: false, robots: action.payload }  \r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, isPending: false, error: action.payload }    \r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\n\r\nimport {Provider} from 'react-redux'; //it's for pass down easly the store (state) in components...\r\n//import {connect} from 'react-redux'; //for avoid  using redux subscript, connect is an optimized way\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {searchRobots,requestRobots} from './reducers.js' ;\r\n\r\nimport { createLogger } from 'redux-logger'; //middleware for a nice logger during development\r\n\r\nimport thunkMiddleware from 'redux-thunk'; //handle asynchronous actions\r\n\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({searchRobots,requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App  />\r\n  </Provider>  \r\n ,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.register();"],"sourceRoot":""}