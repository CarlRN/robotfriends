{"version":3,"sources":["components/Header.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Header","nextProps","nextState","console","log","id","className","Component","SearchBox","onSearchFieldChange","type","placeholder","onChange","Card","name","email","alt","src","CardList","robots","map","user","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","App","getCardListView","robotsFiltered","isPending","onRequestRobots","searchField","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d1e9179.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n//import CounterButton from './CounterButton';\r\n\r\nclass Header extends Component{\r\n\r\n    //react cicle hook\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false; //to avoid unnecesary render...\r\n    }\r\n\r\n\r\n    render(){\r\n        console.log('Header')\r\n        return (\r\n            <div>\r\n                <h1 id='title' className='f1'>RoboFriends</h1>\r\n            { /*   <CounterButton color = {'red'} /> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst SearchBox = ({onSearchFieldChange}) => {\r\n    return(\r\n        <div className='pa2'>          \r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search Robots'\r\n                onChange={onSearchFieldChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n\r\nreturn (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt='robot' src={`https://robohash.org/${id}?200x200`} />\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\n\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          robots.map((user) => {\r\n            return (\r\n                <Card \r\n                    key={user.id}\r\n                    id={user.id} \r\n                    name={user.name} \r\n                    email={user.email}\r\n                />\r\n            )\r\n          })\r\n        }\r\n      </div>      \r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={ {overflowY:'scroll',border:'3px solid black',height:'800px'} }>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n       this.setState( {hasError: true} );\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        if (this.state.hasError){\r\n            return <h1>Oh noo! There's an error.</h1>\r\n        }\r\n        \r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Header from '../components/Header';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n//import {robots} from './robots';\r\n\r\n//redux implementation...\r\nimport { connect } from 'react-redux'; //instead using redux subscript, connect is an optimized way\r\nimport { setSearchField, requestRobots } from '../actions.js';\r\n\r\n //set the props that App will use that comes from the store(through the reducer). AS PROPS\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\n//set the action that will be dispatch for this component. AS PROPS\r\n//obs.: dispatch comes from redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchFieldChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()) //thunk middleware tricky here. It need a function return to do his work\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n  componentDidMount(){\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const {searchField, onSearchFieldChange,robots, isPending} = this.props //this props are defined in mapStateToProps and mapDispatchToProps\r\n    const robotsFiltered = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    });\r\n\r\n    //implementation 1: original\r\n   \r\n      return isPending ? <h1 className='tc'>Loading...</h1> :   \r\n       ( \r\n        <div className=\"tc\">\r\n          <Header />       \r\n          <SearchBox onSearchFieldChange={onSearchFieldChange}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={robotsFiltered} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      ); \r\n     \r\n\r\n    //implementation 2: alternative...\r\n  //  return this.getCardListView(robotsFiltered);\r\n\r\n  }\r\n\r\n  //example of how to use if condition 'inside JSX'\r\n  getCardListView = (robotsFiltered) => {\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 id='title' className='f1'>RoboFriends</h1>        \r\n\r\n        { /* IIFE  */ }  \r\n        {(() => {\r\n          if(this.props.isPending){\r\n            return <h1>Loading...</h1>      \r\n          }else{\r\n            return (\r\n              <div>\r\n                <SearchBox onSearchFieldChange={this.props.onSearchFieldChange}/>\r\n                <Scroll>\r\n                  <ErrorBoundry>\r\n                    <CardList robots={robotsFiltered} />\r\n                  </ErrorBoundry>\r\n                </Scroll>  \r\n              </div>)          \r\n          }\r\n        })()}     \r\n      </div> \r\n    )\r\n  } \r\n  \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App); //obs.: connect is a high order function (a function that return another function)\r\n                                                                  //connect tells to this component (App) to subscript to the redux store, specifically\r\n                                                                  //in what states are interested in\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n//return an object\r\nexport const setSearchField = (text) => ({\r\n    type : CHANGE_SEARCH_FIELD,\r\n    payload : text\r\n})\r\n\r\n//obs.: dispatch comes from redux\r\n//Because this action will be a promise (async request) using fetch, it has three actions related...\r\n//this reducer-function return another function (high order function) that it's needed for the thunk middleware \r\n//Use this way when the thunk middleware (or similar) is present because redux for own it cannot understand it\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch( {type: REQUEST_ROBOTS_PENDING} );\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data => dispatch( {type: REQUEST_ROBOTS_SUCCESS, payload: data} ))\r\n    .catch(error => dispatch( {type: REQUEST_ROBOTS_FAILED, payload: error} ))\r\n} ","//related to search field change\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n//related to request robots. Because this action will be a promise (async request) using fetch, it have three actions related...\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state, {searchField: action.payload} )\r\n            //return {...state, searchField: action.payload}\r\n        default:\r\n            return state    \r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\n\r\nexport const requestRobots = (state=initialStateRobots,action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state,  isPending: true  }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, isPending: false, robots: action.payload }  \r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, isPending: false, error: action.payload }    \r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\n\r\nimport {Provider} from 'react-redux'; //it's for pass down easly the store (state) in components...\r\n//import {connect} from 'react-redux'; //for avoid  using redux subscript, connect is an optimized way\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {searchRobots,requestRobots} from './reducers.js' ;\r\n\r\nimport { createLogger } from 'redux-logger'; //middleware for a nice logger during development\r\n\r\nimport thunkMiddleware from 'redux-thunk'; //handle asynchronous actions\r\n\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({searchRobots,requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App  />\r\n  </Provider>  \r\n ,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}